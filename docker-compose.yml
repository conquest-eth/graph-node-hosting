version: '3.3'

# secrets:
#   cloudflare_dns_token:
#     file: "./secrets/cloudflare_dns_token.secret"

services:
  traefik:
    image: "traefik:v2.5"
    container_name: "traefik"
    command:
      # - "--log.level=DEBUG"
      # - "--accesslog=true"
      # - "--accesslog.filters.statuscodes=404"
      # - "--accesslog.filepath=${DATA_PATH:-.}/data/$APP_HOST/logs/access.log"
      # - "--accesslog.bufferingsize=0"
      # - "--accesslog.format=json"
      # - "--accesslog.fields.headers.defaultmode=keep"
      # - "--api.insecure=true" # dashboard on 8080

      # docker
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"

      # endpoints:
      - "--entrypoints.web.address=:80" # open the port 80 and name it web (http)
      - "--entrypoints.websecure.address=:443" # open the port 443 and name it websecure (https)

      # Enable a dns challenge named "myresolver"
      - "--certificatesresolvers.myresolver.acme.dnschallenge=true"
      # Tell which provider to use
      - "--certificatesresolvers.myresolver.acme.dnschallenge.provider=cloudflare"

      # staging env to test
      #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"

      # The email to provide to let's encrypt
      - "--certificatesresolvers.myresolver.acme.email=$LETS_ENCRYPT_EMAIL"

      # Tell to store the certificate on a path under our volume
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"

      # redirect to https
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"

      # Enable dashboard
      - "--api.dashboard=true"

      # enable traefik pilot
      - "--pilot.token=${TRAEFIK_PILOT}"

    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.rule=Host(`traefik${SUBDOMAIN_DIVISOR:-.}${APP_HOST}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=myresolver"

      # add authentication
      - "traefik.http.routers.traefik.middlewares=traefik-auth"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=$BASIC_AUTHENTICATION"


    ports:
      - "80:80" # expose 80 on 80 (web entrypoint)
      - "443:443" # expose 443 on 443 (websecure entrypoint)
    # secrets:
    #   - "cloudflare_dns_token"
    environment:
      # - "CF_DNS_API_TOKEN_FILE=/run/secrets/cloudflare_dns_token"
      - "CF_DNS_API_TOKEN=$CF_DNS_API_TOKEN"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

      # Create a letsencrypt dir within the folder where the docker-compose file is
      # DATA_PATH is needed when used in remote with --context
      - "${DATA_PATH:-.}/data/$APP_HOST/letsencrypt:/letsencrypt"


  # whoami:
  #   image: "traefik/whoami"
  #   container_name: "whoami"
  #   labels:
  #     - "traefik.enable=true"

  #     - "traefik.http.routers.whoami.entrypoints=websecure"
  #     - "traefik.http.routers.whoami.rule=Host(`whoami${SUBDOMAIN_DIVISOR:-.}${APP_HOST}`)"
  #     - "traefik.http.routers.whoami.tls.certresolver=myresolver"


  graph-node:
    image: graphprotocol/graph-node
    container_name: "graph-node"
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.graph-node.entrypoints=websecure"
      - "traefik.http.routers.graph-node.rule=Host(`${APP_HOST}`)"
      - "traefik.http.routers.graph-node.tls.certresolver=myresolver"
      - "traefik.http.routers.graph-node.service=graph-node"
      - "traefik.http.services.graph-node.loadbalancer.server.port=8000"

      - "traefik.http.routers.graph-node-api.entrypoints=websecure"
      # hide POST method require bearer token
      - "traefik.http.routers.graph-node-api.rule=Host(`api${SUBDOMAIN_DIVISOR:-.}${APP_HOST}`) && (Headers(`Authorization`, `Bearer ${GRAPH_API_AUTH_TOKEN}`) || !Method(`POST`))"
      - "traefik.http.routers.graph-node-api.tls.certresolver=myresolver"
      - "traefik.http.routers.graph-node-api.service=graph-node-api"
      - "traefik.http.services.graph-node-api.loadbalancer.server.port=8020"
    # ports:
    #   - '8000:8000'
    #   - '8001:8001'
    #   - '8020:8020'
    #   - '8030:8030'
    #   - '8040:8040'
    depends_on:
      - ipfs
      - postgres
    environment:
      postgres_host: postgres
      postgres_user: graph-node
      postgres_pass: let-me-in
      postgres_db: graph-node
      ipfs: 'ipfs:5001'
      ethereum: '${ETHEREUM_NETWORK}:${ETHEREUM_NODE}'
      GRAPH_LOG: info

# #   graph-node-query:

  ipfs:
    image: ipfs/go-ipfs:v0.4.23
    container_name: "ipfs"
    labels:
      - "traefik.enable=true"

      # - "traefik.http.routers.ipfs-api.entrypoints=websecure"
      # - "traefik.http.routers.ipfs-api.rule=Host(`ipfs-api${SUBDOMAIN_DIVISOR:-.}${APP_HOST}`)"
      # - "traefik.http.routers.ipfs-api.tls.certresolver=myresolver"
      # - "traefik.http.routers.ipfs-api.service=ipfs-api"
      # - "traefik.http.services.ipfs-api.loadbalancer.server.port=5001"

      - "traefik.http.routers.ipfs.entrypoints=websecure"
      - "traefik.http.routers.ipfs.rule=Host(`ipfs${SUBDOMAIN_DIVISOR:-.}${APP_HOST}`)"
      - "traefik.http.routers.ipfs.tls.certresolver=myresolver"
      - "traefik.http.routers.ipfs.service=ipfs"
      - "traefik.http.services.ipfs.loadbalancer.server.port=8080"
    # ports:
    #   - '5001:5001'
    #   - '8080:8080'
    #   - '8081:8081'
    #   - '4001:4001'
    volumes:
      - "${DATA_PATH:-.}/data/$APP_HOST/ipfs:/data/ipfs"

  postgres:
    image: postgres
    container_name: "postgres"
    # labels:
    #   - "traefik.enable=true"

    #   - "traefik.http.routers.postgres.entrypoints=websecure"
    #   - "traefik.http.routers.postgres.rule=Host(`postgres${SUBDOMAIN_DIVISOR:-.}${APP_HOST}`)"
    #   - "traefik.http.routers.postgres.tls.certresolver=myresolver"
    #   - "traefik.http.services.postgres.loadbalancer.server.port=5432"
    # ports:
    #   - '5432:5432'
    command: ["postgres", "-cshared_preload_libraries=pg_stat_statements"]
    environment:
      POSTGRES_USER: graph-node
      POSTGRES_PASSWORD: let-me-in
      POSTGRES_DB: graph-node
    volumes:
      -  "${DATA_PATH:-.}/data/$APP_HOST/postgres:/var/lib/postgresql/data"

